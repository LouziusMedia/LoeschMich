name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * 1'  # Weekly security scan (Mondays 03:00 UTC)

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests with pytest
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check src tests
    
    - name: Check import sorting with isort
      run: |
        isort --profile black --check-only src tests

  security:
    runs-on: ubuntu-latest
    continue-on-error: true  # non-blocking security scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Run safety check (JSON)
      run: |
        safety check --output json --ignore-unpinned-requirements > safety-report.json || true
    
    - name: Run bandit security scan (JSON)
      run: |
        bandit -r src -lll -q -f json -o bandit-report.json || true

    - name: Comment security summary on PR
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          function readJSON(p){ try { return JSON.parse(fs.readFileSync(p,'utf8')); } catch(e){ return null; } }
          const bandit = readJSON('bandit-report.json');
          const safety = readJSON('safety-report.json');
          const banditCount = Array.isArray(bandit?.results) ? bandit.results.length : 0;
          const safetyCount = Array.isArray(safety?.vulnerabilities) ? safety.vulnerabilities.length : 0;
          const banditTop = (bandit?.results || []).slice(0,5)
            .map(r => `- ${r.issue_severity}/${r.issue_confidence}: ${r.test_id} in ${r.filename}:${r.line_number} — ${r.issue_text}`)
            .join('\n') || '- None';
          const safetyTop = (safety?.vulnerabilities || []).slice(0,5)
            .map(v => `- ${(v.severity||'').toString().toUpperCase()} ${v.package_name} ${v.affected_versions || ''} — ${v.advisory || v.cve || ''}`)
            .join('\n') || '- None';
          const body = `Security scan summary\n\n- Bandit findings: ${banditCount}\n- Safety vulnerabilities: ${safetyCount}\n\nBandit (top 5)\n${banditTop}\n\nSafety (top 5)\n${safetyTop}`;
          const { owner, repo } = context.repo;
          await github.rest.issues.createComment({ owner, repo, issue_number: context.issue.number, body });
